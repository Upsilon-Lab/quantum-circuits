# -*- coding: utf-8 -*-
"""DJ Algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14zXUN3R6-v32GisVq34t0XYCeczspAJY
"""

pip install qiskit

# Initialization
import numpy as np

# importing Qiskit
from qiskit import IBMQ, Aer
from qiskit.providers.ibmq import least_busy
from qiskit import QuantumCircuit, assemble, transpile

# import basic plot tools
from qiskit.visualization import plot_histogram

# set the length of the n-bit input string.
n = 3

# Constant Oracle

const_oracle = QuantumCircuit(n+1)

output = np.random.randint(2)
if output == 1:
  const_oracle.x(n)

const_oracle.draw()

# Balanced Oracle
balanced_oracle = QuantumCircuit(n+1)
b_str = "101"

# Place X-gates
for qubit in range(len(b_str)):
  if b_str[qubit] == '1':
    balanced_oracle.x(qubit)

# Use barrier as divider
balanced_oracle.barrier()

# Controlled-NOT gates
for qubit in range(n):
  balanced_oracle.cx(qubit, n)

balanced_oracle.barrier()

#Place X-gates
for qubit in range(len(b_str)):
  if b_str[qubit] == '1':
    balanced_oracle.x(qubit)

# Show oracle
balanced_oracle.draw()

dj_circuit = QuantumCircuit(n+1, n)

# Apply H-gates
for qubit in range(n):
  dj_circuit.h(qubit)

# Put qubit in state l ->
dj_circuit.x(n)
dj_circuit.h(n)

# Add oracle
dj_circuit += balanced_oracle

# Repeat H-gates
for qubit in range(n):
  dj_circuit.h(qubit)
dj_circuit.barrier()

# Measure
for i in range(n):
  dj_circuit.measure(i, i)

# Display circuit
dj_circuit.draw()

aer_sim = Aer.get_backend('aer_simulator')
qobj = assemble(dj_circuit, aer_sim)
results = aer_sim.run(qobj).result()
answer = results.get_counts()

plot_histogram(answer)